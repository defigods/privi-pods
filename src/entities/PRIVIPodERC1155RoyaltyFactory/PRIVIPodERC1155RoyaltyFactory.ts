// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class PodCreated extends EthereumEvent {
  get params(): PodCreated__Params {
    return new PodCreated__Params(this);
  }
}

export class PodCreated__Params {
  _event: PodCreated;

  constructor(event: PodCreated) {
    this._event = event;
  }

  get uri(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get podAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends EthereumEvent {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends EthereumEvent {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends EthereumEvent {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PRIVIPodERC1155RoyaltyFactory extends SmartContract {
  static bind(address: Address): PRIVIPodERC1155RoyaltyFactory {
    return new PRIVIPodERC1155RoyaltyFactory(
      "PRIVIPodERC1155RoyaltyFactory",
      address
    );
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call("DEFAULT_ADMIN_ROLE", []);

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("DEFAULT_ADMIN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  MODERATOR_ROLE(): Bytes {
    let result = super.call("MODERATOR_ROLE", []);

    return result[0].toBytes();
  }

  try_MODERATOR_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("MODERATOR_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  bridgeManagerAddress(): Address {
    let result = super.call("bridgeManagerAddress", []);

    return result[0].toAddress();
  }

  try_bridgeManagerAddress(): CallResult<Address> {
    let result = super.tryCall("bridgeManagerAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", [
      EthereumValue.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getRoleAdmin", [
      EthereumValue.fromFixedBytes(role)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", [
      EthereumValue.fromFixedBytes(role),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): CallResult<boolean> {
    let result = super.tryCall("hasRole", [
      EthereumValue.fromFixedBytes(role),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  podTokenAddressesById(param0: string): Address {
    let result = super.call("podTokenAddressesById", [
      EthereumValue.fromString(param0)
    ]);

    return result[0].toAddress();
  }

  try_podTokenAddressesById(param0: string): CallResult<Address> {
    let result = super.tryCall("podTokenAddressesById", [
      EthereumValue.fromString(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  podTokenAddressesByUri(param0: string): Address {
    let result = super.call("podTokenAddressesByUri", [
      EthereumValue.fromString(param0)
    ]);

    return result[0].toAddress();
  }

  try_podTokenAddressesByUri(param0: string): CallResult<Address> {
    let result = super.tryCall("podTokenAddressesByUri", [
      EthereumValue.fromString(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalPodCreated(): BigInt {
    let result = super.call("totalPodCreated", []);

    return result[0].toBigInt();
  }

  try_totalPodCreated(): CallResult<BigInt> {
    let result = super.tryCall("totalPodCreated", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPodAddressByUri(uri: string): Address {
    let result = super.call("getPodAddressByUri", [
      EthereumValue.fromString(uri)
    ]);

    return result[0].toAddress();
  }

  try_getPodAddressByUri(uri: string): CallResult<Address> {
    let result = super.tryCall("getPodAddressByUri", [
      EthereumValue.fromString(uri)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getPodAddressById(podId: string): Address {
    let result = super.call("getPodAddressById", [
      EthereumValue.fromString(podId)
    ]);

    return result[0].toAddress();
  }

  try_getPodAddressById(podId: string): CallResult<Address> {
    let result = super.tryCall("getPodAddressById", [
      EthereumValue.fromString(podId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createPod(
    uri: string,
    podId: string,
    royaltyAmount: BigInt,
    creator: Address
  ): Address {
    let result = super.call("createPod", [
      EthereumValue.fromString(uri),
      EthereumValue.fromString(podId),
      EthereumValue.fromUnsignedBigInt(royaltyAmount),
      EthereumValue.fromAddress(creator)
    ]);

    return result[0].toAddress();
  }

  try_createPod(
    uri: string,
    podId: string,
    royaltyAmount: BigInt,
    creator: Address
  ): CallResult<Address> {
    let result = super.tryCall("createPod", [
      EthereumValue.fromString(uri),
      EthereumValue.fromString(podId),
      EthereumValue.fromUnsignedBigInt(royaltyAmount),
      EthereumValue.fromAddress(creator)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createMultiCreatorPod(
    uri: string,
    podId: string,
    royaltyAmount: BigInt,
    royaltyShares: Array<BigInt>,
    creators: Array<Address>
  ): Address {
    let result = super.call("createMultiCreatorPod", [
      EthereumValue.fromString(uri),
      EthereumValue.fromString(podId),
      EthereumValue.fromUnsignedBigInt(royaltyAmount),
      EthereumValue.fromUnsignedBigIntArray(royaltyShares),
      EthereumValue.fromAddressArray(creators)
    ]);

    return result[0].toAddress();
  }

  try_createMultiCreatorPod(
    uri: string,
    podId: string,
    royaltyAmount: BigInt,
    royaltyShares: Array<BigInt>,
    creators: Array<Address>
  ): CallResult<Address> {
    let result = super.tryCall("createMultiCreatorPod", [
      EthereumValue.fromString(uri),
      EthereumValue.fromString(podId),
      EthereumValue.fromUnsignedBigInt(royaltyAmount),
      EthereumValue.fromUnsignedBigIntArray(royaltyShares),
      EthereumValue.fromAddressArray(creators)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bridgeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends EthereumCall {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends EthereumCall {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends EthereumCall {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class AssignRoleSwapManagerCall extends EthereumCall {
  get inputs(): AssignRoleSwapManagerCall__Inputs {
    return new AssignRoleSwapManagerCall__Inputs(this);
  }

  get outputs(): AssignRoleSwapManagerCall__Outputs {
    return new AssignRoleSwapManagerCall__Outputs(this);
  }
}

export class AssignRoleSwapManagerCall__Inputs {
  _call: AssignRoleSwapManagerCall;

  constructor(call: AssignRoleSwapManagerCall) {
    this._call = call;
  }

  get swapManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AssignRoleSwapManagerCall__Outputs {
  _call: AssignRoleSwapManagerCall;

  constructor(call: AssignRoleSwapManagerCall) {
    this._call = call;
  }
}

export class CreatePodCall extends EthereumCall {
  get inputs(): CreatePodCall__Inputs {
    return new CreatePodCall__Inputs(this);
  }

  get outputs(): CreatePodCall__Outputs {
    return new CreatePodCall__Outputs(this);
  }
}

export class CreatePodCall__Inputs {
  _call: CreatePodCall;

  constructor(call: CreatePodCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get podId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get royaltyAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreatePodCall__Outputs {
  _call: CreatePodCall;

  constructor(call: CreatePodCall) {
    this._call = call;
  }

  get podAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateMultiCreatorPodCall extends EthereumCall {
  get inputs(): CreateMultiCreatorPodCall__Inputs {
    return new CreateMultiCreatorPodCall__Inputs(this);
  }

  get outputs(): CreateMultiCreatorPodCall__Outputs {
    return new CreateMultiCreatorPodCall__Outputs(this);
  }
}

export class CreateMultiCreatorPodCall__Inputs {
  _call: CreateMultiCreatorPodCall;

  constructor(call: CreateMultiCreatorPodCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get podId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get royaltyAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get royaltyShares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get creators(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class CreateMultiCreatorPodCall__Outputs {
  _call: CreateMultiCreatorPodCall;

  constructor(call: CreateMultiCreatorPodCall) {
    this._call = call;
  }

  get podAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintPodTokenByUriCall extends EthereumCall {
  get inputs(): MintPodTokenByUriCall__Inputs {
    return new MintPodTokenByUriCall__Inputs(this);
  }

  get outputs(): MintPodTokenByUriCall__Outputs {
    return new MintPodTokenByUriCall__Outputs(this);
  }
}

export class MintPodTokenByUriCall__Inputs {
  _call: MintPodTokenByUriCall;

  constructor(call: MintPodTokenByUriCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintPodTokenByUriCall__Outputs {
  _call: MintPodTokenByUriCall;

  constructor(call: MintPodTokenByUriCall) {
    this._call = call;
  }
}

export class MintPodTokenByIdCall extends EthereumCall {
  get inputs(): MintPodTokenByIdCall__Inputs {
    return new MintPodTokenByIdCall__Inputs(this);
  }

  get outputs(): MintPodTokenByIdCall__Outputs {
    return new MintPodTokenByIdCall__Outputs(this);
  }
}

export class MintPodTokenByIdCall__Inputs {
  _call: MintPodTokenByIdCall;

  constructor(call: MintPodTokenByIdCall) {
    this._call = call;
  }

  get podId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintPodTokenByIdCall__Outputs {
  _call: MintPodTokenByIdCall;

  constructor(call: MintPodTokenByIdCall) {
    this._call = call;
  }
}

export class BatchMintPodTokenByUriCall extends EthereumCall {
  get inputs(): BatchMintPodTokenByUriCall__Inputs {
    return new BatchMintPodTokenByUriCall__Inputs(this);
  }

  get outputs(): BatchMintPodTokenByUriCall__Outputs {
    return new BatchMintPodTokenByUriCall__Outputs(this);
  }
}

export class BatchMintPodTokenByUriCall__Inputs {
  _call: BatchMintPodTokenByUriCall;

  constructor(call: BatchMintPodTokenByUriCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BatchMintPodTokenByUriCall__Outputs {
  _call: BatchMintPodTokenByUriCall;

  constructor(call: BatchMintPodTokenByUriCall) {
    this._call = call;
  }
}

export class BatchMintPodTokenByIdCall extends EthereumCall {
  get inputs(): BatchMintPodTokenByIdCall__Inputs {
    return new BatchMintPodTokenByIdCall__Inputs(this);
  }

  get outputs(): BatchMintPodTokenByIdCall__Outputs {
    return new BatchMintPodTokenByIdCall__Outputs(this);
  }
}

export class BatchMintPodTokenByIdCall__Inputs {
  _call: BatchMintPodTokenByIdCall;

  constructor(call: BatchMintPodTokenByIdCall) {
    this._call = call;
  }

  get podId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BatchMintPodTokenByIdCall__Outputs {
  _call: BatchMintPodTokenByIdCall;

  constructor(call: BatchMintPodTokenByIdCall) {
    this._call = call;
  }
}
